{"version":3,"sources":["api/gql.ts","api/gqlClient.ts","store/entity.ts","store/craft.ts","store/stream.ts","components/PaddedCard.jsx","components/ResourceValue.tsx","components/TwoColumnTable.tsx","components/Details.tsx","components/CraftListItem.tsx","components/CraftList.tsx","components/CraftHistory.tsx","components/App.tsx","components/LoadingApp.tsx","index.tsx"],"names":["gql","_temp","Object","classCallCheck","this","classJobFragment","_templateObject","resourcesFragment","_templateObject2","actionFragment","_templateObject3","statusFragment","_templateObject4","entityFragment","_templateObject5","craftingInfoFragment","_templateObject6","streamFragment","_templateObject7","streamSubscription","_templateObject8","entitySubscription","_templateObject9","versionQuery","_templateObject10","streamQuery","_templateObject11","listStreamsQuery","_templateObject12","hookMutation","_templateObject13","errHandlerLink","onError","_ref","graphQLErrors","networkError","map","_ref2","message","locations","path","console","log","concat","executeOperation","httpLink","operation","Promise","resolve","reject","makePromise","execute","then","result","data","errors","catch","error","GQLClient","apiURL","apiToken","_this","wsLink","getAPIVersion","asyncToGenerator","regenerator_default","a","mark","_callee","wrap","_context","prev","next","query","sent","abrupt","apiVersion","stop","listStreams","_callee2","_context2","streams","getStream","_ref5","_callee3","streamID","variables","_context3","stream","_x","apply","arguments","subscribeToStreamEvents","handleStreamEvent","subscribe","subscriptionData","streamEvent","_streamEvent$type","type","__typename","eventData","objectWithoutProperties","subscribeToEntityEvents","handleEntityEvent","entityEvent","entityID","_entityEvent$type","httpOpts","headers","Authorization","wsConnectionParams","authorization","undefined","ApolloLink","from","HttpLink","objectSpread2","uri","WebSocketLink","replace","options","reconnect","connectionParams","Entity","ent","id","index","name","initializerDefineProperty","_descriptor","_descriptor2","_descriptor3","_descriptor4","_descriptor5","level","lastAction","assign","classJob","resources","statuses","forEach","s","idx","typename","action","status","mp","maxMP","l","entries","slicedToArray","sName","param","push","JSON","stringify","observable","computed","deltaString","delta","toConditionName","condition","dayjs","extend","LocalizedFormat","Craft","initialCraftInfo","date","recipe","craft_descriptor","craft_descriptor2","craft_descriptor3","craft_descriptor4","craft_descriptor5","_descriptor6","_descriptor7","_descriptor8","_descriptor9","_descriptor10","_descriptor11","_descriptor12","_descriptor13","_descriptor14","_descriptor15","_descriptor16","_descriptor17","stepNum","currentCondition","previousCondition","durability","Date","now","craftingInfo","lastCraftActionID","durabilityDelta","progress","progressDelta","quality","qualityDelta","hqChance","lastCraftActionName","completed","failed","hist","info","history","cp","maxCP","format","length","RecipeID","RecipeName","RecipeLevel","recipeLevel","StepNum","CP","Durability","Progress","difficulty","Quality","HQChance","PreviousCondition","CurrentCondition","LastCraftAction","Completed","Failed","streamStoreDefaultProps","streamStore","store_stream","gqlClient","pluginParams","semver","satisfies","includePrerelease","getActiveStreamID","entities","characterID","_iterator","_step","n","done","value","set","loading","currentCraft","craftingEvent","newCraft","craftHistory","currentCraftID","e","characterEntity","updateCP","_this2","setEntities","removeEntity","addEntity","entity","delete","_this3","clear","selectedCraftID","get","has","Map","styled","Card","PaddedCard_templateObject","Colors","DARK_GRAY2","ResourceRow","div","ResourceValue_templateObject","ResourceText","ResourceValue_templateObject2","ResourceBar","ResourceValue_templateObject3","ResourceValue","_this$props","props","current","max","color","ratioPct","isNaN","react_default","createElement","style","className","Classes","PROGRESS_BAR","PROGRESS_NO_ANIMATION","PROGRESS_METER","backgroundColor","width","Component","GridBox","TwoColumnTable_templateObject","NameCell","TEXT_MUTED","TEXT_SMALL","children","TwoColumnTable","infos","key","t","React","isValidElement","TwoColumnTable_NameCell","NonIdealBox","Details_templateObject","Details","inject","observer","_this$props$streamSto","noCraftMessage","esm","icon","title","description","PaddedCard","elevation","Elevation","THREE","lastActionName","displayStatusList","Level","ResourceValue_ResourceValue","GOLD3","LastAction","Statuses","CurrentCraft","TwoColumnTable_TwoColumnTable","defaultProps","smallClasses","CraftListItem","onClick","onSelect","craft","selected","child","numSteps","timestamp","text","active","List","UL","CraftList_templateObject","GRAY1","DARK_GRAY5","CraftListContainer","CraftList_CraftList","CraftList","setSelectedCraftID","selectedCraft","Array","reverse","c","CraftListItem_CraftListItem","CraftHistory_templateObject","Container","CraftHistory_templateObject2","Content","CraftHistory_templateObject3","CraftHistory","condensed","interactive","striped","CraftHistory_NonIdealBox","AppRoot","App_templateObject","DARK_GRAY3","App","react","Details_Details","CraftList_CraftListContainer","CraftHistory_CraftHistory","LoadingApp_templateObject","LoadingApp","LoadingApp_AppRoot","intent","getPluginParams","urlParams","window","waitForInit","initPlugin","params","URLSearchParams","location","search","parseInt","Main","initialize","LoadingApp_LoadingApp","App_App","MainWithState","mobxreact_esm","src_Main","ReactDOM","render","src_MainWithState","document","getElementById"],"mappings":"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","file":"static/js/main.3c8cded3.chunk.js","sourcesContent":["import gql from 'graphql-tag';\n\nexport default new class {\n  classJobFragment = gql`\n    fragment classJob on ClassJob {\n      id\n      name\n      abbreviation\n    }\n  `;\n\n  resourcesFragment = gql`\n    fragment resources on Resources {\n      mp\n      maxMP\n      lastTick\n    }\n  `;\n\n  actionFragment = gql`\n    fragment action on Action {\n      id\n      name\n      targetID\n      useTime\n    }\n  `;\n\n  statusFragment = gql`\n    fragment status on Status {\n      id\n      param\n      name\n      description\n      startedTime\n      duration\n      actorID\n      lastTick\n    }\n  `;\n\n  entityFragment = gql`\n    fragment entity on Entity {\n      id\n      index\n      name\n      level\n      classJob {\n        ...classJob\n      }\n      resources {\n        ...resources\n      }\n      lastAction {\n        ...action\n      }\n      statuses {\n        ...status\n      }\n    }\n    ${this.classJobFragment}\n    ${this.resourcesFragment}\n    ${this.actionFragment}\n    ${this.statusFragment}\n  `;\n\n  craftingInfoFragment = gql`\n    fragment craftingInfo on CraftingInfo {\n      recipe {\n        id\n        name\n        recipeLevel\n        element\n        canHQ\n        difficulty\n        quality\n        durability\n      }\n\n      lastCraftActionID\n      lastCraftActionName\n      stepNum\n\n      progress\n      progressDelta\n\n      quality\n      qualityDelta\n\n      hqChance\n\n      durability\n      durabilityDelta\n\n      currentCondition\n      previousCondition\n\n      completed\n      failed\n    }\n  `;\n\n  streamFragment = gql`\n    fragment stream on Stream {\n      id\n      characterID\n      craftingInfo {\n        ...craftingInfo\n      }\n\n      entities {\n        ...entity\n      }\n    }\n    ${this.entityFragment}\n    ${this.craftingInfoFragment}\n  `;\n\n  streamSubscription = gql`\n    subscription Streams {\n      streamEvent {\n        streamID\n        type {\n          __typename\n          ... on UpdateIDs {\n            characterID\n          }\n          ... on UpdateCraftingInfo {\n            craftingInfo {\n              ...craftingInfo\n            }\n          }\n        }\n      }\n    }\n    ${this.craftingInfoFragment}\n  `;\n\n  entitySubscription = gql`\n    subscription Entities {\n      entityEvent {\n        streamID\n        entityID\n        type {\n          __typename\n          ... on AddEntity {\n            entity {\n              ...entity\n            }\n          }\n          ... on RemoveEntity {\n            id\n          }\n          ... on SetEntities {\n            entities {\n              ...entity\n            }\n          }\n          ... on UpdateClass {\n            classJob {\n              ...classJob\n            }\n          }\n          ... on UpdateLastAction {\n            action {\n              ...action\n            }\n          }\n          ... on UpsertStatus {\n            index\n            status {\n              ...status\n            }\n          }\n          ... on RemoveStatus {\n            index\n          }\n          ... on UpdateResources {\n            resources {\n              ...resources\n            }\n          }\n        }\n      }\n    }\n    ${this.entityFragment}\n    ${this.classJobFragment}\n    ${this.actionFragment}\n    ${this.statusFragment}\n    ${this.resourcesFragment}\n  `;\n\n  versionQuery = gql`\n    query Version {\n      apiVersion\n    }\n  `;\n\n  streamQuery = gql`\n    query GetStream($streamID: Int!) {\n      stream(streamID: $streamID) {\n        ...stream\n      }\n    }\n    ${this.streamFragment}\n  `;\n\n  listStreamsQuery = gql`\n    query AllStreams {\n      streams {\n        id\n      }\n    }\n  `;\n\n  hookMutation = gql`\n    mutation SendHookData($req: StreamRequest!) {\n      sendStreamRequest(request: $req)\n    }\n  `;\n}()\n","import gql from './gql';\n\nimport { ApolloLink, execute, makePromise, GraphQLRequest } from 'apollo-link';\nimport { HttpLink } from 'apollo-link-http';\nimport { WebSocketLink } from 'apollo-link-ws';\nimport { onError } from \"apollo-link-error\";\n\nconst errHandlerLink = onError(({ graphQLErrors, networkError }) => {\n  if (graphQLErrors)\n    graphQLErrors.map(({ message, locations, path }) =>\n      console.log(\n        `[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`\n      )\n    );\n  if (networkError) console.log(`[Network error]: ${networkError}`);\n});\n\nconst executeOperation = (httpLink: ApolloLink, operation: GraphQLRequest) => {\n  // Funnel errors into a single promise rejection\n  return new Promise<{ [key: string]: any }>((resolve, reject) => {\n    makePromise(execute(httpLink, operation))\n      .then((result) => {\n        if (result.data) {\n          resolve(result.data);\n        } else {\n          reject(result.errors);\n        }\n      })\n      .catch((error) => reject(error));\n  })\n};\n\nexport default class GQLClient {\n  private httpLink: ApolloLink;\n  private wsLink: ApolloLink;\n\n  constructor(apiURL: string, apiToken?: string) {\n    let httpOpts = (apiToken) ? {\n      headers: {\n        Authorization: apiToken,\n      }\n    } : {};\n    let wsConnectionParams = (apiToken) ? () => ({\n      authorization: apiToken,\n    }) : undefined;\n\n    this.httpLink = ApolloLink.from([\n      errHandlerLink,\n      new HttpLink({ uri: apiURL, ...httpOpts }),\n    ]);\n    this.wsLink = ApolloLink.from([\n      errHandlerLink,\n      new WebSocketLink({\n        uri: apiURL.replace('http://', 'ws://'),\n        options: {\n          reconnect: true,\n          connectionParams: wsConnectionParams,\n        },\n      }),\n    ]);\n  }\n\n  public getAPIVersion = async (): Promise<string> => {\n    const data = await executeOperation(\n      this.httpLink, { query: gql.versionQuery },\n    );\n    return data.apiVersion;\n  }\n\n  public listStreams = async () => {\n    const data = await executeOperation(\n      this.httpLink, { query: gql.listStreamsQuery },\n    )\n    return data.streams;\n  }\n\n  public getStream = async (streamID: number) => {\n    const variables = { streamID }\n    const data = await executeOperation(\n      this.httpLink, { query: gql.streamQuery, variables },\n    )\n    return data.stream;\n  }\n\n  public subscribeToStreamEvents = (\n    streamID: number, handleStreamEvent: (type: string, data: any) => void\n  ) =>\n    execute(this.wsLink, { query: gql.streamSubscription })\n      .subscribe({\n        next: (subscriptionData) => {\n          if (!subscriptionData.data) { return; }\n          let streamEvent = subscriptionData.data.streamEvent;\n          if (streamEvent.streamID !== streamID) { return; }\n          let { __typename, ...eventData } = streamEvent.type;\n          handleStreamEvent(__typename, eventData);\n        },\n      });\n\n  public subscribeToEntityEvents = (\n    streamID: number, handleEntityEvent: (entityID: number, type: string, data: any) => void,\n  ) =>\n    execute(this.wsLink, { query: gql.entitySubscription })\n      .subscribe({\n        next: (subscriptionData) => {\n          if (!subscriptionData.data) { return; }\n          let entityEvent = subscriptionData.data.entityEvent;\n          if (entityEvent.streamID !== streamID) { return; }\n\n          let { entityID } = entityEvent;\n          let { __typename, ...eventData } = entityEvent.type;\n          handleEntityEvent(entityID, __typename, eventData);\n        },\n      });\n}\n","import { observable, action, computed } from 'mobx';\n\nexport interface ClassJob {\n  id: number;\n  name: string;\n  abbreviation: string;\n}\n\nexport interface Resources {\n  mp: number;\n  maxMP: number;\n  lastTick: number;\n}\n\nexport interface Status {\n  id: number;\n  param: number;\n  name: string;\n  description: string;\n  startedTime: number;\n  duration: number;\n  actorID: number;\n  lastTick: number;\n}\n\nexport interface Action {\n  id: number;\n  name: string;\n  targetID: number;\n  useTime: number;\n}\n\nexport interface EntitySpec {\n  id: number;\n  index: number;\n  name: string;\n  level: number;\n  classJob: ClassJob;\n  resources: Resources;\n  lastAction?: Action;\n  statuses: Status[];\n}\n\nexport default class Entity {\n  id = 0;\n  index = -1;\n  name = \"\";\n\n  @observable level = -1;\n  @observable classJob: ClassJob;\n  @observable resources: Resources;\n  @observable lastAction?: Action;\n  @observable statuses: { [idx: number]: Status } = {};\n\n  constructor(ent: EntitySpec) {\n    let {\n      id, index, name, level, lastAction,\n    } = ent;\n    Object.assign(this, { id, index, name, level, lastAction });\n\n    this.classJob = ent.classJob;\n    this.resources = ent.resources;\n    ent.statuses.forEach((s, idx) => {\n      if (s) { this.statuses[idx] = s; }\n    });\n  }\n\n  @action handleEntityEvent(typename: string, eventData: any) {\n    switch (typename) {\n      case \"UpdateClass\":\n        this.classJob = eventData.classJob;\n        break;\n      case \"UpdateLastAction\":\n        this.lastAction = eventData.action;\n        break;\n      case \"UpsertStatus\":\n        this.statuses[eventData.index] = eventData.status;\n        break;\n      case \"RemoveStatus\":\n        delete this.statuses[eventData.index];\n        break;\n      case \"UpdateResources\":\n        this.resources = eventData.resources;\n        break;\n    }\n  }\n\n  @computed get lastActionName() {\n    if (this.lastAction) {\n      return this.lastAction.name;\n    }\n    return \"\";\n  }\n\n  // CP is the same thing as MP\n  @computed get cp() {\n    return this.resources.mp;\n  }\n\n  @computed get maxCP() {\n    return this.resources.maxMP;\n  }\n\n  @computed get displayStatusList() {\n    let l: string[] = [];\n    Object.entries(this.statuses).forEach(([idx, s]) => {\n      let sName = `${s.name}`;\n      if (s.param) {\n        sName = `${sName} (${s.param})`;\n      }\n      l.push(sName);\n    });\n    return JSON.stringify(l);\n  }\n}\n","import { observable, action, computed } from 'mobx';\n\nimport dayjs from 'dayjs';\nimport LocalizedFormat from 'dayjs/plugin/localizedFormat'\ndayjs.extend(LocalizedFormat)\n\nfunction deltaString(delta: number) {\n  if (delta >= 0) {\n    return `(+${delta})`;\n  }\n  return `(${delta})`;\n}\n\nexport type ConditionName = \"Normal\" | \"Good\" | \"Excellent\" | \"Poor\" |\n  \"Centered\" | \"Sturdy\" | \"Pliant\" | \"Malleable\" | \"Primed\" | \"Unknown\";\n\nfunction toConditionName(condition: number): ConditionName {\n  switch (condition) {\n    case 1:\n      return \"Normal\";\n    case 2:\n      return \"Good\";\n    case 3:\n      return \"Excellent\";\n    case 4:\n      return \"Poor\"\n    case 5:\n      return \"Centered\";\n    case 6:\n      return \"Sturdy\";\n    case 7:\n      return \"Pliant\";\n    case 8:\n      return \"Malleable\";\n    case 9:\n      return \"Primed\";\n  }\n  console.log(\"Unknown condition:\", condition)\n  return \"Unknown\";\n}\n\nexport interface Recipe {\n  id: number;\n  name: string;\n  recipeLevel: number;\n  element: number;\n  canHQ: boolean;\n  difficulty: number;\n  quality: number;\n  durability: number;\n}\n\nexport interface CraftInfo {\n  recipe: Recipe;\n\n  lastCraftActionID: number;\n  lastCraftActionName: string;\n  stepNum: number;\n\n  progress: number;\n  progressDelta: number;\n\n  quality: number;\n  qualityDelta: number;\n\n  hqChance: number;\n\n  durability: number;\n  durabilityDelta: number;\n\n  currentCondition: number;\n  previousCondition: number;\n\n  completed: boolean;\n  failed: boolean;\n}\n\nexport interface DisplayCraftInfo {\n  id: string;\n\n  RecipeID: number;\n  RecipeName: string;\n  RecipeLevel: number;\n  StepNum: number;\n  CP: string;\n  Durability: string;\n  Progress: string;\n  Quality: string;\n  HQChance: string;\n  PreviousCondition: ConditionName;\n  CurrentCondition: ConditionName;\n  LastCraftAction: string;\n\n  Completed: string;\n  Failed: string;\n}\n\n\nexport default class Craft {\n  date = 0;\n  recipe: Recipe;\n\n  @observable history: DisplayCraftInfo[] = [];\n  @observable stepNum = 0;\n  @observable cp = 0;\n  @observable maxCP = 0;\n\n  @observable durability = 0;\n  @observable durabilityDelta = 0;\n\n  @observable progress = 0;\n  @observable progressDelta = 0;\n\n  @observable quality = 0;\n  @observable qualityDelta = 0;\n  @observable hqChance = 1;\n\n  @observable previousCondition = 1;\n  @observable currentCondition = 1;\n\n  @observable lastCraftActionID = 0;\n  @observable lastCraftActionName = \"\";\n\n  @observable completed = false;\n  @observable failed = false;\n\n  constructor(initialCraftInfo: CraftInfo) {\n    let { recipe, stepNum, currentCondition, previousCondition, durability } = initialCraftInfo;\n    this.recipe = recipe;\n    this.stepNum = stepNum;\n    this.currentCondition = currentCondition;\n    this.previousCondition = previousCondition;\n    this.durability = durability;\n\n    this.date = Date.now();\n  }\n\n  @action craftingEvent(craftingInfo: CraftInfo) {\n    if (craftingInfo.lastCraftActionID <= 0) {\n      return;\n    }\n\n    this.stepNum = craftingInfo.stepNum;\n\n    this.durability = craftingInfo.durability;\n    this.durabilityDelta = craftingInfo.durabilityDelta;\n\n    this.progress = craftingInfo.progress;\n    this.progressDelta = craftingInfo.progressDelta;\n\n    this.quality = craftingInfo.quality;\n    this.qualityDelta = craftingInfo.qualityDelta;\n\n    this.hqChance = craftingInfo.hqChance;\n\n    this.previousCondition = craftingInfo.previousCondition;\n    this.currentCondition = craftingInfo.currentCondition;\n\n    this.lastCraftActionID = craftingInfo.lastCraftActionID;\n    this.lastCraftActionName = craftingInfo.lastCraftActionName;\n\n    this.completed = craftingInfo.completed;\n    this.failed = craftingInfo.failed;\n\n    let hist = Object.assign({}, this.info);\n    hist.id = `${Date.now()}`;\n    this.history.push(hist);\n  }\n\n  @action updateCP(cp: number, maxCP: number) {\n    this.cp = cp;\n    this.maxCP = maxCP;\n  }\n\n  @computed get id() {\n    return dayjs(this.date).format();\n  }\n\n  @computed get timestamp() {\n    return dayjs(this.date).format('l h:mm:ss a');\n  }\n\n  @computed get numSteps() {\n    return this.history.length;\n  }\n\n  @computed get condition() {\n    return toConditionName(this.currentCondition);\n  }\n\n  @computed get info(): DisplayCraftInfo {\n    return {\n      id: this.id,\n\n      RecipeID: this.recipe.id,\n      RecipeName: this.recipe.name,\n      RecipeLevel: this.recipe.recipeLevel,\n      StepNum: this.stepNum,\n      CP: `${this.cp} / ${this.maxCP}`,\n      Durability: `${this.durability} / ${this.recipe.durability} ${deltaString(this.durabilityDelta)}`,\n      Progress: `${this.progress} / ${this.recipe.difficulty} ${deltaString(this.progressDelta)}`,\n      Quality: `${this.quality} / ${this.recipe.quality} ${deltaString(this.qualityDelta)}`,\n      HQChance: `${this.hqChance}%`,\n      PreviousCondition: toConditionName(this.previousCondition),\n      CurrentCondition: toConditionName(this.currentCondition),\n      LastCraftAction: `${this.lastCraftActionName} (${this.lastCraftActionID})`,\n\n      Completed: `${this.completed}`,\n      Failed: `${this.failed}`,\n    }\n  }\n}\n","import { action, observable, computed } from 'mobx';\nimport GQLClient from '../api/gqlClient';\n\nimport Entity, { EntitySpec } from './entity';\nimport Craft from './craft';\n\nimport semver from 'semver';\n\nexport interface StreamStoreProps {\n  streamStore: Stream;\n}\nexport const streamStoreDefaultProps = { streamStore: (null as unknown) as Stream };\n\nexport interface PluginParams {\n  apiURL: string;\n  apiToken?: string;\n  streamID?: number;\n}\n\nclass Stream {\n  @observable loading = true;\n  @observable error?: string;\n\n  gqlClient?: GQLClient;\n  streamID = 0;\n  apiURL = '';;\n\n  @observable craftHistory = new Map<string, Craft>();\n  @observable selectedCraftID = \"\";\n  @observable currentCraftID = \"\";\n  @observable entities = new Map<number, Entity>();\n  @observable characterID = 0;\n\n  @action async initialize(pluginParams: PluginParams) {\n    this.gqlClient = new GQLClient(pluginParams.apiURL, pluginParams.apiToken);\n\n    const apiVersion = await this.gqlClient.getAPIVersion();\n\n    if (!semver.satisfies(apiVersion, '>=0.3.1', { includePrerelease: true })) {\n      this.error = \"Your version of Aetherometer is no longer supported by \" +\n        \"this plugin. Please update to a newer version.\";\n      return;\n    }\n\n\n    const streamID = this.streamID = await this.getActiveStreamID(pluginParams);\n    this.subscribeToStreamEvents();\n    this.subscribeToEntityEvents();\n\n    if (!streamID) {\n      this.error = \"Stream ID not found!\";\n      return;\n    }\n\n    const stream = await this.gqlClient.getStream(streamID);\n\n    const { entities, characterID } = stream;\n    this.characterID = characterID;\n    for (let ent of entities) {\n      this.entities.set(ent.id, new Entity(ent));\n    }\n\n    this.loading = false;\n  }\n\n  async getActiveStreamID(pluginParams: PluginParams) {\n    if (pluginParams.streamID) {\n      return pluginParams.streamID;\n    } else {\n      const streams = await this.gqlClient!.listStreams();\n      if (streams.length > 0) {\n        return streams[0].id;\n      }\n    }\n    return 0;\n  }\n\n  @action subscribeToStreamEvents() {\n    return this.gqlClient!.subscribeToStreamEvents(\n      this.streamID,\n      action((typename: string, eventData: any) => {\n        if (this.loading) { return; }\n        switch (typename) {\n          case \"UpdateIDs\":\n            this.characterID = eventData.characterID;\n            break;\n          case \"UpdateCraftingInfo\":\n            if (!eventData.craftingInfo) {\n              this.currentCraftID = \"\";\n            } else if (this.currentCraft) {\n              this.currentCraft.craftingEvent(eventData.craftingInfo);\n            } else {\n              let newCraft = new Craft(eventData.craftingInfo);\n              this.craftHistory.set(newCraft.id, newCraft);\n              this.currentCraftID = newCraft.id;\n            }\n            let e = this.characterEntity;\n            if (this.currentCraft && e) {\n              this.currentCraft.updateCP(e.cp, e.maxCP);\n            }\n            break;\n        }\n      }));\n  }\n\n  @action subscribeToEntityEvents() {\n    return this.gqlClient!.subscribeToEntityEvents(\n      this.streamID,\n      action((entityID: number, typename: string, eventData: any) => {\n        if (this.loading) { return; }\n\n        if (typename === \"AddEntity\") {\n          this.addEntity(eventData.entity);\n          return;\n        } else if (typename === \"RemoveEntity\") {\n          this.removeEntity(eventData.id);\n          return;\n        } else if (typename === \"SetEntities\") {\n          this.setEntities(eventData.entities);\n          return;\n        }\n        if (this.characterEntity && entityID === this.characterEntity.id) {\n          this.characterEntity.handleEntityEvent(typename, eventData);\n        }\n      }));\n  }\n\n  @action addEntity(ent: EntitySpec) {\n    this.entities.set(ent.id, new Entity(ent));\n  }\n\n  @action removeEntity(id: number) {\n    this.entities.delete(id);\n  }\n\n  @action setEntities(entities: EntitySpec[]) {\n    this.entities.clear();\n    entities.forEach((ent) => {\n      this.addEntity(ent);\n    });\n  }\n\n  @action setSelectedCraftID(id: string) {\n    this.selectedCraftID = id;\n  }\n\n  @computed get characterEntity() {\n    return this.entities.get(this.characterID);\n  }\n\n  @computed get selectedCraft() {\n    if (this.craftHistory.has(this.selectedCraftID)) {\n      return this.craftHistory.get(this.selectedCraftID);\n    } else {\n      return null;\n    }\n  }\n\n  @computed get currentCraft() {\n    return this.craftHistory.get(this.currentCraftID);\n  }\n}\n\nexport default new Stream();\n","import { Card, Colors } from '@blueprintjs/core';\nimport styled from 'styled-components';\n\nexport default styled(Card)`\n  padding: 20px;\n  margin: 20px;\n  && {\n    background-color: ${Colors.DARK_GRAY2};\n  }\n`;\n\n","import React, { Component } from 'react';\n\nimport styled from 'styled-components';\nimport { Classes } from '@blueprintjs/core';\n\nconst ResourceRow = styled.div`\n  display: flex;\n  flex-direction: row;\n`;\n\nconst ResourceText = styled.div`\n  flex: 1 0 auto;\n  margin-right: 5px;\n`;\n\nconst ResourceBar = styled.div`\n  margin: 5px 0px;\n  flex: 0 0 auto;\n  margin-left: 5px;\n  flex-basis: 120px;\n`;\n\ninterface ResourceValueProps {\n  current: number;\n  max: number;\n  color: string;\n}\n\nexport default class ResourceValue extends Component<ResourceValueProps> {\n  static propTypes = {\n  };\n\n  render() {\n    let { current, max, color } = this.props;\n    let ratioPct = (current / max) * 100;\n    if (isNaN(ratioPct)) {\n      ratioPct = 100;\n    }\n    return (\n      <ResourceRow>\n        <ResourceText style={{ color: color }}>{current}/{max}</ResourceText>\n        <ResourceBar>\n          <div className={`${Classes.PROGRESS_BAR} ${Classes.PROGRESS_NO_ANIMATION}`}>\n            <div className={Classes.PROGRESS_METER} style={{\n              backgroundColor: color,\n              width: `${ratioPct}%`,\n            }}></div>\n          </div>\n        </ResourceBar>\n      </ResourceRow>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport { Classes } from '@blueprintjs/core';\nimport styled from 'styled-components';\n\nimport dayjs from 'dayjs';\n\nimport LocalizedFormat from 'dayjs/plugin/localizedFormat'\ndayjs.extend(LocalizedFormat)\n\nconst GridBox = styled.div`\n  display: grid;\n  grid-row-gap: 5px;\n  grid-column-gap: 10px;\n  grid-template-columns: max-content auto;\n  grid-auto-rows: minmax(18px, auto);\n`;\n\nconst NameCell = (props: { children: any }) =>\n  <div className={`${Classes.TEXT_MUTED} ${Classes.TEXT_SMALL}`}>{props.children}</div>\n\n\ninterface TwoColumnTableProps {\n  infos: { [key: string]: any } | Array<{ [key: string]: any }>;\n}\n\nexport default class TwoColumnTable extends Component<TwoColumnTableProps> {\n  render() {\n    let entries: JSX.Element[] = [];\n    Object.entries(this.props.infos).forEach(([key, value]) => {\n      let t = typeof value;\n      if (t !== \"number\" && t !== \"string\" && !React.isValidElement(value)) {\n        if (!value) {\n          value = (<div></div>);\n        } else {\n          value = (<TwoColumnTable infos={value} />);\n        }\n      }\n      if (key === \"lastUpdated\" ||\n        key === \"lastTick\" ||\n        key === \"startedTime\" ||\n        key === \"useTime\") {\n        value = dayjs(value).format(\"L HH:mm:ss.SSS\");\n      }\n\n      entries.push(<NameCell key={`${key}-name`}>{key}</NameCell>);\n      entries.push(<div key={`${key}-info`}>{value}</div>);\n    });\n\n    return (\n      <GridBox>\n        {entries}\n      </GridBox>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport { Colors, Elevation, NonIdealState } from '@blueprintjs/core';\nimport styled from 'styled-components';\n\nimport { inject, observer } from 'mobx-react';\n\nimport PaddedCard from './PaddedCard';\nimport ResourceValue from './ResourceValue';\nimport TwoColumnTable from './TwoColumnTable';\nimport { streamStoreDefaultProps, StreamStoreProps } from '../store/stream';\n\nconst NonIdealBox = styled.div`\n  height: 340px;\n`;\n\n@inject(\"streamStore\")\n@observer\nexport default class Details extends Component<StreamStoreProps> {\n  static defaultProps = streamStoreDefaultProps;\n  render() {\n    const { characterEntity, currentCraft } = this.props.streamStore;\n\n    const noCraftMessage = (\n      <NonIdealBox>\n        <NonIdealState\n          icon=\"build\"\n          title=\"No crafting in progress\"\n          description=\"Start a craft to see current details on the crafting state.\"\n        />\n      </NonIdealBox>\n    );\n\n    if (!characterEntity) {\n      return (\n        <PaddedCard elevation={Elevation.THREE}>\n          <NonIdealBox>\n            <NonIdealState\n              icon=\"user\"\n              title=\"No character detected\"\n              description=\"Please rezone or log in to see the state of your current character.\"\n            />\n          </NonIdealBox>\n        </PaddedCard>\n      );\n    }\n\n    const { level, cp, maxCP, lastActionName, displayStatusList } = characterEntity;\n    const infos = {\n      Level: level,\n      CP: (<ResourceValue current={cp} max={maxCP} color={Colors.GOLD3} />),\n      LastAction: lastActionName,\n      Statuses: displayStatusList,\n      CurrentCraft: (currentCraft && currentCraft.info) || noCraftMessage,\n    };\n    return (\n      <PaddedCard elevation={Elevation.THREE}>\n        <TwoColumnTable infos={infos} />\n      </PaddedCard>\n    );\n  }\n}\n","import React, { Component } from 'react';\n\nimport { MenuItem, Classes } from '@blueprintjs/core';\n\nimport { observer } from 'mobx-react';\n\nimport Craft from '../store/craft';\n\nconst smallClasses = `${Classes.TEXT_SMALL} ${Classes.TEXT_MUTED}`;\n\ninterface CraftListItemProps {\n  craft: Craft;\n  selected: boolean;\n\n  onSelect: (id: string) => void;\n}\n\n@observer\nexport default class CraftListItem extends Component<CraftListItemProps> {\n  onClick = () => {\n    this.props.onSelect(this.props.craft.id);\n  }\n\n  render() {\n    const { craft, selected } = this.props;\n\n    let child = (\n      <div>\n        <span>{craft.recipe.name} </span>\n        <span className={smallClasses}>({craft.numSteps} steps) - {craft.timestamp}</span>\n        {(!craft.failed && craft.completed) && <span className={smallClasses}> COMPLETED</span>}\n        {craft.failed && <span className={smallClasses}> FAILED</span>}\n      </div>\n    );\n\n    return (\n      <MenuItem text={child} active={selected} onClick={this.onClick} />\n    );\n  }\n}\n","import React, { Component } from 'react';\n\nimport { UL, Elevation, Colors, H5 } from '@blueprintjs/core';\nimport styled from 'styled-components';\n\nimport PaddedCard from './PaddedCard';\nimport CraftListItem from './CraftListItem';\n\nimport { inject, observer } from 'mobx-react';\nimport { streamStoreDefaultProps, StreamStoreProps } from '../store/stream';\n\nconst List = styled(UL)`\n  list-style: none;\n  padding: 0;\n  max-height: 30vh;\n  overflow-y: auto;\n\n  &::-webkit-scrollbar {\n    width: 5px;\n  }\n\n  &::-webkit-scrollbar-track {\n    background: ${Colors.GRAY1};\n  }\n\n  &::-webkit-scrollbar-thumb {\n    background: ${Colors.DARK_GRAY5};\n  }\n`;\n\nexport default class CraftListContainer extends Component {\n  render() {\n    return (\n      <PaddedCard elevation={Elevation.THREE}>\n        <H5>Craft Histories</H5>\n        <CraftList />\n      </PaddedCard>\n    );\n  }\n}\n\n@inject(\"streamStore\")\n@observer\nclass CraftList extends Component<StreamStoreProps> {\n  static defaultProps = streamStoreDefaultProps;\n\n  onSelect = (id: string) => {\n    this.props.streamStore.setSelectedCraftID(id);\n  }\n\n  render() {\n    const { craftHistory, selectedCraft } = this.props.streamStore;\n    return (\n      <List>\n        {Array.from(craftHistory).reverse().map(([_, c]) =>\n          <CraftListItem\n            key={c.id} craft={c}\n            selected={c === selectedCraft}\n            onSelect={this.onSelect}\n          />\n        )}\n      </List>\n    );\n  }\n}\n","import React, { Component } from 'react';\n\nimport { Elevation, NonIdealState, HTMLTable } from '@blueprintjs/core';\nimport styled from 'styled-components';\n\nimport PaddedCard from './PaddedCard';\nimport TwoColumnTable from './TwoColumnTable';\n\nimport { inject, observer } from 'mobx-react';\nimport { StreamStoreProps, streamStoreDefaultProps } from '../store/stream';\nimport { DisplayCraftInfo } from '../store/craft';\n\n\nconst NonIdealBox = styled.div`\n  height: 400px;\n`;\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: row;\n`;\n\nconst Content = styled.div`\n  flex: 1 0 auto;\n`;\n\n@inject(\"streamStore\")\n@observer\nexport default class CraftHistory extends Component<StreamStoreProps> {\n  static defaultProps = streamStoreDefaultProps;\n\n  render() {\n    const { selectedCraft } = this.props.streamStore;\n    if (!selectedCraft) {\n      return (\n        <PaddedCard elevation={Elevation.THREE}>\n          <NonIdealBox>\n            <NonIdealState\n              icon=\"list\"\n              title=\"No craft history selected\"\n              description=\"Select a craft history to view it.\"\n            />\n          </NonIdealBox>\n        </PaddedCard>\n      );\n    }\n\n    return (\n      <PaddedCard elevation={Elevation.THREE}>\n        <Container>\n          <Content>\n            <TwoColumnTable infos={selectedCraft.info} />\n          </Content>\n          <Content>\n            <HTMLTable condensed interactive striped>\n              <thead>\n                <tr>\n                  <th>Step</th>\n                  <th>Durability</th>\n                  <th>CP</th>\n                  <th>Progress</th>\n                  <th>Quality</th>\n                  <th>HQ %</th>\n                  <th>Condition</th>\n                  <th>Action</th>\n                </tr>\n              </thead>\n              <tbody>\n                {selectedCraft.history.map((c: DisplayCraftInfo) =>\n                  <tr key={c.id}>\n                    <th>{c.StepNum - 1}</th>\n                    <th>{c.CP}</th>\n                    <th>{c.Durability}</th>\n                    <th>{c.Progress}</th>\n                    <th>{c.Quality}</th>\n                    <th>{c.HQChance}</th>\n                    <th>{c.PreviousCondition}</th>\n                    <th>{c.LastCraftAction} </th>\n                  </tr>\n                )}\n              </tbody>\n            </HTMLTable>\n          </Content>\n        </Container>\n      </PaddedCard>\n    );\n  }\n}\n","import * as React from 'react';\nimport { Colors } from '@blueprintjs/core';\n\nimport styled from 'styled-components';\n\nimport './App.css';\n\nimport Details from './Details';\nimport CraftList from './CraftList';\nimport CraftHistory from './CraftHistory';\n\nconst AppRoot = styled.div`\n  background-color: ${Colors.DARK_GRAY3};\n  height: 100vh;\n  overflow-y: auto;\n\n  &::-webkit-scrollbar {\n    width: 5px;\n  }\n\n  &::-webkit-scrollbar-track {\n    background: ${Colors.GRAY1};\n  }\n\n  &::-webkit-scrollbar-thumb {\n    background: ${Colors.DARK_GRAY5};\n  }\n`;\n\nexport default class App extends React.Component {\n  render() {\n    return (\n      <AppRoot className=\"bp3-dark\">\n        <Details />\n        <CraftList />\n        <CraftHistory />\n      </AppRoot>\n    );\n  }\n}\n","\nimport React, { Component } from 'react';\nimport { Colors, NonIdealState, Spinner } from '@blueprintjs/core';\n\nimport styled from 'styled-components';\n\nimport './App.css';\n\nconst AppRoot = styled.div`\n  background-color: ${Colors.DARK_GRAY3};\n  min-height: 100vh;\n  height: 100vh;\n  margin: auto;\n`;\n\ninterface LoadingAppProps {\n  error?: string;\n}\n\nexport default class LoadingApp extends Component<LoadingAppProps> {\n  render() {\n    if (this.props.error) {\n      return (\n        <AppRoot className=\"bp3-dark\">\n          <NonIdealState\n            icon=\"warning-sign\"\n            title={this.props.error}\n          />\n        </AppRoot>\n      )\n    }\n    return (\n      <AppRoot className=\"bp3-dark\">\n        <NonIdealState\n          icon={<Spinner intent=\"primary\" />}\n          title=\"Loading...\"\n        />\n      </AppRoot>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { inject, observer, Provider } from 'mobx-react';\n\nimport streamStore, { PluginParams, StreamStoreProps, streamStoreDefaultProps } from './store/stream';\n\nimport App from './components/App';\nimport LoadingApp from './components/LoadingApp';\n\ndeclare global {\n  interface Window {\n    waitForInit?: boolean;\n    initPlugin?: (params: PluginParams) => void;\n  }\n}\n\nconst getPluginParams = async (): Promise<PluginParams> => {\n  if (window.waitForInit) {\n    return new Promise((resolve) => {\n      window.initPlugin = (params) => {\n        resolve(params);\n      };\n    });\n  }\n  const urlParams = new URLSearchParams(window.location.search);\n  let apiURL = urlParams.get('apiURL') || 'http://localhost:8080/query';\n  let apiToken = urlParams.get('apiToken') || undefined;\n  let streamID = undefined;\n  if (urlParams.has('streamID')) {\n    streamID = parseInt(urlParams.get('streamID')!);\n  }\n  return { apiURL, apiToken, streamID };\n};\n\n@inject('streamStore')\n@observer\nclass Main extends Component<StreamStoreProps> {\n  static defaultProps = streamStoreDefaultProps;\n\n  componentDidMount() {\n    getPluginParams().then((params) => {\n      this.props.streamStore.initialize(params);\n    });\n  }\n\n  render() {\n    const { loading, error } = this.props.streamStore;\n\n    if (loading) return <LoadingApp error={error} />;\n    return (<App />);\n  }\n}\n\n\nconst MainWithState = () => (\n  <Provider {...{ streamStore }}>\n    <Main />\n  </Provider>\n);\n\nReactDOM.render(<MainWithState />, document.getElementById('root'));\n"],"sourceRoot":""}