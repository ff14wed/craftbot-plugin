{"version":3,"sources":["api/gql.ts","api/gqlClient.ts","store/entity.ts","store/craft.ts","store/stream.ts","components/PaddedCard.jsx","components/ResourceValue.tsx","components/TwoColumnTable.tsx","components/Details.tsx","components/InlineDiv.jsx","components/CraftListItem.tsx","components/CraftList.tsx","components/CraftHistory.tsx","components/App.tsx","components/LoadingApp.tsx","index.tsx"],"names":["gql","_temp","Object","classCallCheck","this","classJobFragment","_templateObject","resourcesFragment","_templateObject2","actionFragment","_templateObject3","statusFragment","_templateObject4","entityFragment","_templateObject5","craftingInfoFragment","_templateObject6","streamFragment","_templateObject7","streamSubscription","_templateObject8","entitySubscription","_templateObject9","versionQuery","_templateObject10","streamQuery","_templateObject11","listStreamsQuery","_templateObject12","hookMutation","_templateObject13","errHandlerLink","onError","_ref","graphQLErrors","networkError","map","_ref2","message","locations","path","console","log","concat","executeOperation","httpLink","operation","Promise","resolve","reject","makePromise","execute","then","result","data","errors","catch","error","GQLClient","apiURL","apiToken","_this","wsLink","getAPIVersion","asyncToGenerator","regenerator_default","a","mark","_callee","wrap","_context","prev","next","query","sent","abrupt","apiVersion","stop","listStreams","_callee2","_context2","streams","getStream","_ref5","_callee3","streamID","variables","_context3","stream","_x","apply","arguments","subscribeToStreamEvents","handleStreamEvent","subscribe","subscriptionData","streamEvent","_streamEvent$type","type","__typename","eventData","objectWithoutProperties","subscribeToEntityEvents","handleEntityEvent","entityEvent","entityID","_entityEvent$type","httpOpts","headers","Authorization","wsConnectionParams","authorization","undefined","ApolloLink","from","HttpLink","objectSpread","uri","WebSocketLink","replace","options","reconnect","connectionParams","Entity","ent","id","index","name","initializerDefineProperty","_descriptor","_descriptor2","_descriptor3","_descriptor4","_descriptor5","level","lastAction","assign","classJob","resources","statuses","forEach","s","idx","typename","action","status","mp","maxMP","l","entries","slicedToArray","sName","param","push","JSON","stringify","observable","computed","deltaString","delta","toConditionName","condition","dayjs","extend","LocalizedFormat","Craft","initialCraftInfo","date","recipe","craft_descriptor","craft_descriptor2","craft_descriptor3","craft_descriptor4","craft_descriptor5","_descriptor6","_descriptor7","_descriptor8","_descriptor9","_descriptor10","_descriptor11","_descriptor12","_descriptor13","_descriptor14","_descriptor15","_descriptor16","stepNum","Date","now","craftingInfo","lastCraftActionID","completed","durability","durabilityDelta","progress","progressDelta","quality","qualityDelta","hqChance","previousCondition","currentCondition","lastCraftActionName","reuseProc","hist","info","history","failed","format","length","Completed","Failed","RecipeID","RecipeName","RecipeLevel","recipeLevel","StepNum","Durability","Progress","difficulty","Quality","HQChance","PreviousCondition","CurrentCondition","LastCraftAction","ReuseProc","streamStoreDefaultProps","streamStore","store_stream","gqlClient","pluginParams","semver","satisfies","includePrerelease","getActiveStreamID","entities","characterID","_iterator","Symbol","iterator","_iteratorNormalCompletion","_step","done","value","set","loading","currentCraft","craftingEvent","newCraft","craftHistory","currentCraftID","_this2","characterEntity","setEntities","removeEntity","addEntity","entity","delete","_this3","clear","selectedCraftID","get","has","Map","styled","Card","PaddedCard_templateObject","Colors","DARK_GRAY2","ResourceRow","div","ResourceValue_templateObject","ResourceText","ResourceValue_templateObject2","ResourceBar","ResourceValue_templateObject3","ResourceValue","_this$props","props","current","max","color","ratioPct","isNaN","react_default","createElement","style","className","Classes","PROGRESS_BAR","PROGRESS_NO_ANIMATION","PROGRESS_METER","backgroundColor","width","Component","GridBox","TwoColumnTable_templateObject","NameCell","TEXT_MUTED","TEXT_SMALL","children","TwoColumnTable","infos","key","t","React","isValidElement","TwoColumnTable_NameCell","NonIdealBox","Details_templateObject","Details","inject","observer","_this$props$streamSto","noCraftMessage","nonIdealState","icon","title","description","PaddedCard","elevation","Elevation","THREE","cp","maxCP","lastActionName","displayStatusList","Level","CP","ResourceValue_ResourceValue","GOLD3","LastAction","Statuses","CurrentCraft","TwoColumnTable_TwoColumnTable","defaultProps","InlineDiv_templateObject","smallClasses","CraftListItem","onClick","onSelect","craft","selected","child","InlineDiv","numSteps","timestamp","menuItem","text","active","List","UL","CraftList_templateObject","GRAY1","DARK_GRAY5","CraftListContainer","html","CraftList_CraftList","CraftList","setSelectedCraftID","selectedCraft","Array","reverse","c","CraftListItem_CraftListItem","CraftHistory_templateObject","Container","CraftHistory_templateObject2","Content","CraftHistory_templateObject3","CraftHistory","htmlTable","condensed","interactive","striped","CraftHistory_NonIdealBox","AppRoot","App_templateObject","DARK_GRAY3","App","react","Details_Details","CraftList_CraftListContainer","CraftHistory_CraftHistory","LoadingApp_templateObject","LoadingApp","LoadingApp_AppRoot","spinner","intent","getPluginParams","window","waitForInit","initPlugin","params","Main","initialize","LoadingApp_LoadingApp","App_App","ReactDOM","render","mobx_react_module","src_Main","document","getElementById"],"mappings":"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","file":"static/js/main.eb7055ed.chunk.js","sourcesContent":["import gql from 'graphql-tag';\n\nexport default new class {\n  classJobFragment = gql`\n    fragment classJob on ClassJob {\n      id\n      name\n      abbreviation\n    }\n  `;\n\n  resourcesFragment = gql`\n    fragment resources on Resources {\n      mp\n      maxMP\n      lastTick\n    }\n  `;\n\n  actionFragment = gql`\n    fragment action on Action {\n      id\n      name\n      targetID\n      useTime\n    }\n  `;\n\n  statusFragment = gql`\n    fragment status on Status {\n      id\n      param\n      name\n      description\n      startedTime\n      duration\n      actorID\n      lastTick\n    }\n  `;\n\n  entityFragment = gql`\n    fragment entity on Entity {\n      id\n      index\n      name\n      level\n      classJob {\n        ...classJob\n      }\n      resources {\n        ...resources\n      }\n      lastAction {\n        ...action\n      }\n      statuses {\n        ...status\n      }\n    }\n    ${this.classJobFragment}\n    ${this.resourcesFragment}\n    ${this.actionFragment}\n    ${this.statusFragment}\n  `;\n\n  craftingInfoFragment = gql`\n    fragment craftingInfo on CraftingInfo {\n      recipe {\n        id\n        name\n        recipeLevel\n        element\n        canHQ\n        difficulty\n        quality\n        durability\n      }\n\n      lastCraftActionID\n      lastCraftActionName\n      stepNum\n\n      progress\n      progressDelta\n\n      quality\n      qualityDelta\n\n      hqChance\n\n      durability\n      durabilityDelta\n\n      currentCondition\n      previousCondition\n\n      reuseProc\n    }\n  `;\n\n  streamFragment = gql`\n    fragment stream on Stream {\n      id\n      characterID\n      craftingInfo {\n        ...craftingInfo\n      }\n\n      entities {\n        ...entity\n      }\n    }\n    ${this.entityFragment}\n    ${this.craftingInfoFragment}\n  `;\n\n  streamSubscription = gql`\n    subscription Streams {\n      streamEvent {\n        streamID\n        type {\n          __typename\n          ... on UpdateIDs {\n            characterID\n          }\n          ... on UpdateCraftingInfo {\n            craftingInfo {\n              ...craftingInfo\n            }\n          }\n        }\n      }\n    }\n    ${this.craftingInfoFragment}\n  `;\n\n  entitySubscription = gql`\n    subscription Entities {\n      entityEvent {\n        streamID\n        entityID\n        type {\n          __typename\n          ... on AddEntity {\n            entity {\n              ...entity\n            }\n          }\n          ... on RemoveEntity {\n            id\n          }\n          ... on SetEntities {\n            entities {\n              ...entity\n            }\n          }\n          ... on UpdateClass {\n            classJob {\n              ...classJob\n            }\n          }\n          ... on UpdateLastAction {\n            action {\n              ...action\n            }\n          }\n          ... on UpsertStatus {\n            index\n            status {\n              ...status\n            }\n          }\n          ... on RemoveStatus {\n            index\n          }\n          ... on UpdateResources {\n            resources {\n              ...resources\n            }\n          }\n        }\n      }\n    }\n    ${this.entityFragment}\n    ${this.classJobFragment}\n    ${this.actionFragment}\n    ${this.statusFragment}\n    ${this.resourcesFragment}\n  `;\n\n  versionQuery = gql`\n    query Version {\n      apiVersion\n    }\n  `;\n\n  streamQuery = gql`\n    query GetStream($streamID: Int!) {\n      stream(streamID: $streamID) {\n        ...stream\n      }\n    }\n    ${this.streamFragment}\n  `;\n\n  listStreamsQuery = gql`\n    query AllStreams {\n      streams {\n        id\n      }\n    }\n  `;\n\n  hookMutation = gql`\n    mutation SendHookData($req: StreamRequest!) {\n      sendStreamRequest(request: $req)\n    }\n  `;\n}()\n","import gql from './gql';\n\nimport { ApolloLink, execute, makePromise, GraphQLRequest } from 'apollo-link';\nimport { HttpLink } from 'apollo-link-http';\nimport { WebSocketLink } from 'apollo-link-ws';\nimport { onError } from \"apollo-link-error\";\n\nconst errHandlerLink = onError(({ graphQLErrors, networkError }) => {\n  if (graphQLErrors)\n    graphQLErrors.map(({ message, locations, path }) =>\n      console.log(\n        `[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`\n      )\n    );\n  if (networkError) console.log(`[Network error]: ${networkError}`);\n});\n\nconst executeOperation = (httpLink: ApolloLink, operation: GraphQLRequest) => {\n  // Funnel errors into a single promise rejection\n  return new Promise<{ [key: string]: any }>((resolve, reject) => {\n    makePromise(execute(httpLink, operation))\n      .then((result) => {\n        if (result.data) {\n          resolve(result.data);\n        } else {\n          reject(result.errors);\n        }\n      })\n      .catch((error) => reject(error));\n  })\n};\n\nexport default class GQLClient {\n  private httpLink: ApolloLink;\n  private wsLink: ApolloLink;\n\n  constructor(apiURL: string, apiToken?: string) {\n    let httpOpts = (apiToken) ? {\n      headers: {\n        Authorization: apiToken,\n      }\n    } : {};\n    let wsConnectionParams = (apiToken) ? () => ({\n      authorization: apiToken,\n    }) : undefined;\n\n    this.httpLink = ApolloLink.from([\n      errHandlerLink,\n      new HttpLink({ uri: apiURL, ...httpOpts }),\n    ]);\n    this.wsLink = ApolloLink.from([\n      errHandlerLink,\n      new WebSocketLink({\n        uri: apiURL.replace('http://', 'ws://'),\n        options: {\n          reconnect: true,\n          connectionParams: wsConnectionParams,\n        },\n      }),\n    ]);\n  }\n\n  public getAPIVersion = async (): Promise<string> => {\n    const data = await executeOperation(\n      this.httpLink, { query: gql.versionQuery },\n    );\n    return data.apiVersion;\n  }\n\n  public listStreams = async () => {\n    const data = await executeOperation(\n      this.httpLink, { query: gql.listStreamsQuery },\n    )\n    return data.streams;\n  }\n\n  public getStream = async (streamID: number) => {\n    const variables = { streamID }\n    const data = await executeOperation(\n      this.httpLink, { query: gql.streamQuery, variables },\n    )\n    return data.stream;\n  }\n\n  public subscribeToStreamEvents = (\n    streamID: number, handleStreamEvent: (type: string, data: any) => void\n  ) =>\n    execute(this.wsLink, { query: gql.streamSubscription })\n      .subscribe({\n        next: (subscriptionData) => {\n          if (!subscriptionData.data) { return; }\n          let streamEvent = subscriptionData.data.streamEvent;\n          if (streamEvent.streamID !== streamID) { return; }\n          let { __typename, ...eventData } = streamEvent.type;\n          handleStreamEvent(__typename, eventData);\n        },\n      });\n\n  public subscribeToEntityEvents = (\n    streamID: number, handleEntityEvent: (entityID: number, type: string, data: any) => void,\n  ) =>\n    execute(this.wsLink, { query: gql.entitySubscription })\n      .subscribe({\n        next: (subscriptionData) => {\n          if (!subscriptionData.data) { return; }\n          let entityEvent = subscriptionData.data.entityEvent;\n          if (entityEvent.streamID !== streamID) { return; }\n\n          let { entityID } = entityEvent;\n          let { __typename, ...eventData } = entityEvent.type;\n          handleEntityEvent(entityID, __typename, eventData);\n        },\n      });\n}\n","import { observable, action, computed } from 'mobx';\n\nexport interface ClassJob {\n  id: number;\n  name: string;\n  abbreviation: string;\n}\n\nexport interface Resources {\n  mp: number;\n  maxMP: number;\n  lastTick: number;\n}\n\nexport interface Status {\n  id: number;\n  param: number;\n  name: string;\n  description: string;\n  startedTime: number;\n  duration: number;\n  actorID: number;\n  lastTick: number;\n}\n\nexport interface Action {\n  id: number;\n  name: string;\n  targetID: number;\n  useTime: number;\n}\n\nexport interface EntitySpec {\n  id: number;\n  index: number;\n  name: string;\n  level: number;\n  classJob: ClassJob;\n  resources: Resources;\n  lastAction?: Action;\n  statuses: Status[];\n}\n\nexport default class Entity {\n  id = 0;\n  index = -1;\n  name = \"\";\n\n  @observable level = -1;\n  @observable classJob: ClassJob;\n  @observable resources: Resources;\n  @observable lastAction?: Action;\n  @observable statuses: { [idx: number]: Status } = {};\n\n  constructor(ent: EntitySpec) {\n    let {\n      id, index, name, level, lastAction,\n    } = ent;\n    Object.assign(this, { id, index, name, level, lastAction });\n\n    this.classJob = ent.classJob;\n    this.resources = ent.resources;\n    ent.statuses.forEach((s, idx) => {\n      if (s) { this.statuses[idx] = s; }\n    });\n  }\n\n  @action handleEntityEvent(typename: string, eventData: any) {\n    switch (typename) {\n      case \"UpdateClass\":\n        this.classJob = eventData.classJob;\n        break;\n      case \"UpdateLastAction\":\n        this.lastAction = eventData.action;\n        break;\n      case \"UpsertStatus\":\n        this.statuses[eventData.index] = eventData.status;\n        break;\n      case \"RemoveStatus\":\n        delete this.statuses[eventData.index];\n        break;\n      case \"UpdateResources\":\n        this.resources = eventData.resources;\n        break;\n    }\n  }\n\n  @computed get lastActionName() {\n    if (this.lastAction) {\n      return this.lastAction.name;\n    }\n    return \"\";\n  }\n\n  // CP is the same thing as MP\n  @computed get cp() {\n    return this.resources.mp;\n  }\n\n  @computed get maxCP() {\n    return this.resources.maxMP;\n  }\n\n  @computed get displayStatusList() {\n    let l: string[] = [];\n    Object.entries(this.statuses).forEach(([idx, s]) => {\n      let sName = `${s.id}`;\n      if (s.param) {\n        sName = `${sName} (${s.param})`;\n      }\n      l.push(sName);\n    });\n    return JSON.stringify(l);\n  }\n}\n","import { observable, action, computed } from 'mobx';\n\nimport dayjs from 'dayjs';\nimport LocalizedFormat from 'dayjs/plugin/localizedFormat'\ndayjs.extend(LocalizedFormat)\n\nfunction deltaString(delta: number) {\n  if (delta >= 0) {\n    return `(+${delta})`;\n  }\n  return `(${delta})`;\n}\n\nexport type ConditionName = \"Normal\" | \"Good\" | \"Excellent\" | \"Poor\";\n\nfunction toConditionName(condition: number): ConditionName {\n  switch (condition) {\n    case 1:\n      return \"Normal\";\n    case 2:\n      return \"Good\";\n    case 3:\n      return \"Excellent\";\n  }\n  return \"Poor\";\n}\n\nexport interface Recipe {\n  id: number;\n  name: string;\n  recipeLevel: number;\n  element: number;\n  canHQ: boolean;\n  difficulty: number;\n  quality: number;\n  durability: number;\n}\n\nexport interface CraftInfo {\n  recipe: Recipe;\n\n  lastCraftActionID: number;\n  lastCraftActionName: string;\n  stepNum: number;\n\n  progress: number;\n  progressDelta: number;\n\n  quality: number;\n  qualityDelta: number;\n\n  hqChance: number;\n\n  durability: number;\n  durabilityDelta: number;\n\n  currentCondition: number;\n  previousCondition: number;\n\n  reuseProc: boolean;\n}\n\nexport interface DisplayCraftInfo {\n  id: string;\n  Completed: string;\n  Failed: string;\n\n  RecipeID: number;\n  RecipeName: string;\n  RecipeLevel: number;\n  StepNum: number;\n  Durability: string;\n  Progress: string;\n  Quality: string;\n  HQChance: string;\n  PreviousCondition: ConditionName;\n  CurrentCondition: ConditionName;\n  LastCraftAction: string;\n  ReuseProc: string;\n}\n\n\nexport default class Craft {\n  date = 0;\n  recipe: Recipe;\n\n  @observable history: DisplayCraftInfo[] = [];\n  @observable stepNum = 0;\n\n  @observable durability = 0;\n  @observable durabilityDelta = 0;\n\n  @observable progress = 0;\n  @observable progressDelta = 0;\n\n  @observable quality = 0;\n  @observable qualityDelta = 0;\n  @observable hqChance = 1;\n\n  @observable previousCondition = 1;\n  @observable currentCondition = 1;\n\n  @observable lastCraftActionID = 0;\n  @observable lastCraftActionName = \"\";\n\n  @observable completed = false;\n  @observable failed = false;\n\n  @observable reuseProc = false;\n\n  constructor(initialCraftInfo: CraftInfo) {\n    let { recipe, stepNum } = initialCraftInfo;\n    this.recipe = recipe;\n    this.stepNum = stepNum;\n\n    this.date = Date.now();\n  }\n\n  @action craftingEvent(craftingInfo: CraftInfo) {\n    if (craftingInfo.stepNum === 0) {\n      this.failed = true;\n      return;\n    }\n    if (craftingInfo.lastCraftActionID <= 0) {\n      return;\n    }\n\n    if (craftingInfo.stepNum === this.stepNum) {\n      this.completed = true;\n    } else {\n      this.stepNum = craftingInfo.stepNum;\n    }\n\n    this.durability = craftingInfo.durability;\n    this.durabilityDelta = craftingInfo.durabilityDelta;\n\n    this.progress = craftingInfo.progress;\n    this.progressDelta = craftingInfo.progressDelta;\n\n    this.quality = craftingInfo.quality;\n    this.qualityDelta = craftingInfo.qualityDelta;\n\n    this.hqChance = craftingInfo.hqChance;\n\n    this.previousCondition = craftingInfo.previousCondition;\n    this.currentCondition = craftingInfo.currentCondition;\n\n    this.lastCraftActionID = craftingInfo.lastCraftActionID;\n    this.lastCraftActionName = craftingInfo.lastCraftActionName;\n\n    this.reuseProc = craftingInfo.reuseProc;\n\n    let hist = Object.assign({}, this.info);\n    hist.id = `${Date.now()}`;\n    this.history.push(hist);\n  }\n\n  @computed get id() {\n    return dayjs(this.date).format();\n  }\n\n  @computed get timestamp() {\n    return dayjs(this.date).format('l h:mm:ss a');\n  }\n\n  @computed get numSteps() {\n    return this.history.length;\n  }\n\n  @computed get condition() {\n    return toConditionName(this.currentCondition);\n  }\n\n  @computed get info(): DisplayCraftInfo {\n    return {\n      id: this.id,\n      Completed: `${this.completed}`,\n      Failed: `${this.failed}`,\n\n      RecipeID: this.recipe.id,\n      RecipeName: this.recipe.name,\n      RecipeLevel: this.recipe.recipeLevel,\n      StepNum: this.stepNum,\n      Durability: `${this.durability} / ${this.recipe.durability} ${deltaString(this.durabilityDelta)}`,\n      Progress: `${this.progress} / ${this.recipe.difficulty} ${deltaString(this.progressDelta)}`,\n      Quality: `${this.quality} / ${this.recipe.quality} ${deltaString(this.qualityDelta)}`,\n      HQChance: `${this.hqChance}%`,\n      PreviousCondition: toConditionName(this.previousCondition),\n      CurrentCondition: toConditionName(this.currentCondition),\n      LastCraftAction: `${this.lastCraftActionName} (${this.lastCraftActionID})`,\n      ReuseProc: `${this.reuseProc}`,\n    }\n  }\n}\n","import { action, observable, computed } from 'mobx';\nimport GQLClient from '../api/gqlClient';\n\nimport Entity, { EntitySpec } from './entity';\nimport Craft from './craft';\n\nimport semver from 'semver';\n\nexport interface StreamStoreProps {\n  streamStore: Stream;\n}\nexport const streamStoreDefaultProps = { streamStore: (null as unknown) as Stream };\n\nexport interface PluginParams {\n  apiURL: string;\n  apiToken?: string;\n  streamID?: number;\n}\n\nclass Stream {\n  @observable loading = true;\n  @observable error?: string;\n\n  gqlClient?: GQLClient;\n  streamID = 0;\n  apiURL = '';;\n\n  @observable craftHistory = new Map<string, Craft>();\n  @observable selectedCraftID = \"\";\n  @observable currentCraftID = \"\";\n  @observable entities = new Map<number, Entity>();\n  @observable characterID = 0;\n\n  @action async initialize(pluginParams: PluginParams) {\n    this.gqlClient = new GQLClient(pluginParams.apiURL, pluginParams.apiToken);\n\n    const apiVersion = await this.gqlClient.getAPIVersion();\n\n    if (!semver.satisfies(apiVersion, '>=0.2.0-beta', { includePrerelease: true })) {\n      this.error = \"Your version of Aetherometer is no longer supported by \" +\n        \"this plugin. Please update to a newer version.\";\n      return;\n    }\n\n\n    const streamID = this.streamID = await this.getActiveStreamID(pluginParams);\n    this.subscribeToStreamEvents();\n    this.subscribeToEntityEvents();\n\n    if (!streamID) {\n      this.error = \"Stream ID not found!\";\n      return;\n    }\n\n    const stream = await this.gqlClient.getStream(streamID);\n\n    const { entities, characterID } = stream;\n    this.characterID = characterID;\n    for (let ent of entities) {\n      this.entities.set(ent.id, new Entity(ent));\n    }\n\n    this.loading = false;\n  }\n\n  async getActiveStreamID(pluginParams: PluginParams) {\n    if (pluginParams.streamID) {\n      return pluginParams.streamID;\n    } else {\n      const streams = await this.gqlClient!.listStreams();\n      if (streams.length > 0) {\n        return streams[0].id;\n      }\n    }\n    return 0;\n  }\n\n  @action subscribeToStreamEvents() {\n    return this.gqlClient!.subscribeToStreamEvents(\n      this.streamID,\n      action((typename: string, eventData: any) => {\n        if (this.loading) { return; }\n        switch (typename) {\n          case \"UpdateIDs\":\n            this.characterID = eventData.characterID;\n            break;\n          case \"UpdateCraftingInfo\":\n            if (!eventData.craftingInfo) {\n              this.currentCraftID = \"\";\n            } else if (this.currentCraft) {\n              this.currentCraft.craftingEvent(eventData.craftingInfo);\n            } else {\n              let newCraft = new Craft(eventData.craftingInfo);\n              this.craftHistory.set(newCraft.id, newCraft);\n              this.currentCraftID = newCraft.id;\n            }\n            break;\n        }\n      }));\n  }\n\n  @action subscribeToEntityEvents() {\n    return this.gqlClient!.subscribeToEntityEvents(\n      this.streamID,\n      action((entityID: number, typename: string, eventData: any) => {\n        if (this.loading) { return; }\n\n        if (typename === \"AddEntity\") {\n          this.addEntity(eventData.entity);\n          return;\n        } else if (typename === \"RemoveEntity\") {\n          this.removeEntity(eventData.id);\n          return;\n        } else if (typename === \"SetEntities\") {\n          this.setEntities(eventData.entities);\n          return;\n        }\n        if (this.characterEntity && entityID === this.characterEntity.id) {\n          this.characterEntity.handleEntityEvent(typename, eventData);\n        }\n      }));\n  }\n\n  @action addEntity(ent: EntitySpec) {\n    this.entities.set(ent.id, new Entity(ent));\n  }\n\n  @action removeEntity(id: number) {\n    this.entities.delete(id);\n  }\n\n  @action setEntities(entities: EntitySpec[]) {\n    this.entities.clear();\n    entities.forEach((ent) => {\n      this.addEntity(ent);\n    });\n  }\n\n  @action setSelectedCraftID(id: string) {\n    this.selectedCraftID = id;\n  }\n\n  @computed get characterEntity() {\n    return this.entities.get(this.characterID);\n  }\n\n  @computed get selectedCraft() {\n    if (this.craftHistory.has(this.selectedCraftID)) {\n      return this.craftHistory.get(this.selectedCraftID);\n    } else {\n      return null;\n    }\n  }\n\n  @computed get currentCraft() {\n    return this.craftHistory.get(this.currentCraftID);\n  }\n}\n\nexport default new Stream();\n","import { Card, Colors } from '@blueprintjs/core';\nimport styled from 'styled-components';\n\nexport default styled(Card)`\n  padding: 20px;\n  margin: 20px;\n  && {\n    background-color: ${Colors.DARK_GRAY2};\n  }\n`;\n\n","import React, { Component } from 'react';\n\nimport styled from 'styled-components';\nimport { Classes } from '@blueprintjs/core';\n\nconst ResourceRow = styled.div`\n  display: flex;\n  flex-direction: row;\n`;\n\nconst ResourceText = styled.div`\n  flex: 1 0 auto;\n  margin-right: 5px;\n`;\n\nconst ResourceBar = styled.div`\n  margin: 5px 0px;\n  flex: 0 0 auto;\n  margin-left: 5px;\n  flex-basis: 120px;\n`;\n\ninterface ResourceValueProps {\n  current: number;\n  max: number;\n  color: string;\n}\n\nexport default class ResourceValue extends Component<ResourceValueProps> {\n  static propTypes = {\n  };\n\n  render() {\n    let { current, max, color } = this.props;\n    let ratioPct = (current / max) * 100;\n    if (isNaN(ratioPct)) {\n      ratioPct = 100;\n    }\n    return (\n      <ResourceRow>\n        <ResourceText style={{ color: color }}>{current}/{max}</ResourceText>\n        <ResourceBar>\n          <div className={`${Classes.PROGRESS_BAR} ${Classes.PROGRESS_NO_ANIMATION}`}>\n            <div className={Classes.PROGRESS_METER} style={{\n              backgroundColor: color,\n              width: `${ratioPct}%`,\n            }}></div>\n          </div>\n        </ResourceBar>\n      </ResourceRow>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport { Classes } from '@blueprintjs/core';\nimport styled from 'styled-components';\n\nimport dayjs from 'dayjs';\n\nimport LocalizedFormat from 'dayjs/plugin/localizedFormat'\ndayjs.extend(LocalizedFormat)\n\nconst GridBox = styled.div`\n  display: grid;\n  grid-row-gap: 5px;\n  grid-column-gap: 10px;\n  grid-template-columns: max-content auto;\n  grid-auto-rows: minmax(18px, auto);\n`;\n\nconst NameCell = (props: { children: any }) =>\n  <div className={`${Classes.TEXT_MUTED} ${Classes.TEXT_SMALL}`}>{props.children}</div>\n\n\ninterface TwoColumnTableProps {\n  infos: { [key: string]: any } | Array<{ [key: string]: any }>;\n}\n\nexport default class TwoColumnTable extends Component<TwoColumnTableProps> {\n  render() {\n    let entries: JSX.Element[] = [];\n    Object.entries(this.props.infos).forEach(([key, value]) => {\n      let t = typeof value;\n      if (t !== \"number\" && t !== \"string\" && !React.isValidElement(value)) {\n        if (!value) {\n          value = (<div></div>);\n        } else {\n          value = (<TwoColumnTable infos={value} />);\n        }\n      }\n      if (key === \"lastUpdated\" ||\n        key === \"lastTick\" ||\n        key === \"startedTime\" ||\n        key === \"useTime\") {\n        value = dayjs(value).format(\"L HH:mm:ss.SSS\");\n      }\n\n      entries.push(<NameCell key={`${key}-name`}>{key}</NameCell>);\n      entries.push(<div key={`${key}-info`}>{value}</div>);\n    });\n\n    return (\n      <GridBox>\n        {entries}\n      </GridBox>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport { Colors, Elevation, NonIdealState } from '@blueprintjs/core';\nimport styled from 'styled-components';\n\nimport { inject, observer } from 'mobx-react';\n\nimport PaddedCard from './PaddedCard';\nimport ResourceValue from './ResourceValue';\nimport TwoColumnTable from './TwoColumnTable';\nimport { streamStoreDefaultProps, StreamStoreProps } from '../store/stream';\n\nconst NonIdealBox = styled.div`\n  height: 340px;\n`;\n\n@inject(\"streamStore\")\n@observer\nexport default class Details extends Component<StreamStoreProps> {\n  static defaultProps = streamStoreDefaultProps;\n  render() {\n    const { characterEntity, currentCraft } = this.props.streamStore;\n\n    const noCraftMessage = (\n      <NonIdealBox>\n        <NonIdealState\n          icon=\"build\"\n          title=\"No crafting in progress\"\n          description=\"Start a craft to see current details on the crafting state.\"\n        />\n      </NonIdealBox>\n    );\n\n    if (!characterEntity) {\n      return (\n        <PaddedCard elevation={Elevation.THREE}>\n          <NonIdealBox>\n            <NonIdealState\n              icon=\"user\"\n              title=\"No character detected\"\n              description=\"Please rezone or log in to see the state of your current character.\"\n            />\n          </NonIdealBox>\n        </PaddedCard>\n      );\n    }\n\n    const { level, cp, maxCP, lastActionName, displayStatusList } = characterEntity;\n    const infos = {\n      Level: level,\n      CP: (<ResourceValue current={cp} max={maxCP} color={Colors.GOLD3} />),\n      LastAction: lastActionName,\n      Statuses: displayStatusList,\n      CurrentCraft: (currentCraft && currentCraft.info) || noCraftMessage,\n    };\n    return (\n      <PaddedCard elevation={Elevation.THREE}>\n        <TwoColumnTable infos={infos} />\n      </PaddedCard>\n    );\n  }\n}\n","import styled from 'styled-components';\n\nexport default styled.div`\n  display: inline-block;\n  margin-right: 5px;\n`;","import React, { Component } from 'react';\n\nimport { MenuItem, Classes } from '@blueprintjs/core';\n\nimport { observer } from 'mobx-react';\n\nimport InlineDiv from './InlineDiv';\nimport Craft from '../store/craft';\n\nconst smallClasses = `${Classes.TEXT_SMALL} ${Classes.TEXT_MUTED}`;\n\ninterface CraftListItemProps {\n  craft: Craft;\n  selected: boolean;\n\n  onSelect: (id: string) => void;\n}\n\n@observer\nexport default class CraftListItem extends Component<CraftListItemProps> {\n  onClick = () => {\n    this.props.onSelect(this.props.craft.id);\n  }\n\n  render() {\n    const { craft, selected } = this.props;\n\n    let child = (\n      <div>\n        <InlineDiv>{craft.recipe.name} </InlineDiv>\n        <InlineDiv className={smallClasses}>({craft.numSteps} steps) - {craft.timestamp}</InlineDiv>\n        {(!craft.failed && craft.completed) && <InlineDiv className={smallClasses}> COMPLETED</InlineDiv>}\n        {craft.failed && <InlineDiv className={smallClasses}> FAILED</InlineDiv>}\n      </div>\n    );\n\n    return (\n      <MenuItem text={child} active={selected} onClick={this.onClick} />\n    );\n  }\n}\n","import React, { Component } from 'react';\n\nimport { UL, Elevation, Colors, H5 } from '@blueprintjs/core';\nimport styled from 'styled-components';\n\nimport PaddedCard from './PaddedCard';\nimport CraftListItem from './CraftListItem';\n\nimport { inject, observer } from 'mobx-react';\nimport { streamStoreDefaultProps, StreamStoreProps } from '../store/stream';\n\nconst List = styled(UL)`\n  list-style: none;\n  padding: 0;\n  max-height: 30vh;\n  overflow-y: auto;\n\n  &::-webkit-scrollbar {\n    width: 5px;\n  }\n\n  &::-webkit-scrollbar-track {\n    background: ${Colors.GRAY1};\n  }\n\n  &::-webkit-scrollbar-thumb {\n    background: ${Colors.DARK_GRAY5};\n  }\n`;\n\nexport default class CraftListContainer extends Component {\n  render() {\n    return (\n      <PaddedCard elevation={Elevation.THREE}>\n        <H5>Craft Histories</H5>\n        <CraftList />\n      </PaddedCard>\n    );\n  }\n}\n\n@inject(\"streamStore\")\n@observer\nclass CraftList extends Component<StreamStoreProps> {\n  static defaultProps = streamStoreDefaultProps;\n\n  onSelect = (id: string) => {\n    this.props.streamStore.setSelectedCraftID(id);\n  }\n\n  render() {\n    const { craftHistory, selectedCraft } = this.props.streamStore;\n    return (\n      <List>\n        {Array.from(craftHistory).reverse().map(([_, c]) =>\n          <CraftListItem\n            key={c.id} craft={c}\n            selected={c === selectedCraft}\n            onSelect={this.onSelect}\n          />\n        )}\n      </List>\n    );\n  }\n}\n","import React, { Component } from 'react';\n\nimport { Elevation, NonIdealState, HTMLTable } from '@blueprintjs/core';\nimport styled from 'styled-components';\n\nimport PaddedCard from './PaddedCard';\nimport TwoColumnTable from './TwoColumnTable';\n\nimport { inject, observer } from 'mobx-react';\nimport { StreamStoreProps, streamStoreDefaultProps } from '../store/stream';\nimport { DisplayCraftInfo } from '../store/craft';\n\n\nconst NonIdealBox = styled.div`\n  height: 400px;\n`;\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: row;\n`;\n\nconst Content = styled.div`\n  flex: 1 0 auto;\n`;\n\n@inject(\"streamStore\")\n@observer\nexport default class CraftHistory extends Component<StreamStoreProps> {\n  static defaultProps = streamStoreDefaultProps;\n\n  render() {\n    const { selectedCraft } = this.props.streamStore;\n    if (!selectedCraft) {\n      return (\n        <PaddedCard elevation={Elevation.THREE}>\n          <NonIdealBox>\n            <NonIdealState\n              icon=\"list\"\n              title=\"No craft history selected\"\n              description=\"Select a craft history to view it.\"\n            />\n          </NonIdealBox>\n        </PaddedCard>\n      );\n    }\n\n    return (\n      <PaddedCard elevation={Elevation.THREE}>\n        <Container>\n          <Content>\n            <TwoColumnTable infos={selectedCraft.info} />\n          </Content>\n          <Content>\n            <HTMLTable condensed interactive striped>\n              <thead>\n                <tr>\n                  <th>Step Num</th>\n                  <th>Durability</th>\n                  <th>Progress</th>\n                  <th>Quality</th>\n                  <th>HQ Chance</th>\n                  <th>Condition</th>\n                  <th>Next Condition</th>\n                  <th>Action</th>\n                </tr>\n              </thead>\n              <tbody>\n                {selectedCraft.history.map((c: DisplayCraftInfo) =>\n                  <tr key={c.id}>\n                    <th>{c.StepNum - 1}</th>\n                    <th>{c.Durability}</th>\n                    <th>{c.Progress}</th>\n                    <th>{c.Quality}</th>\n                    <th>{c.HQChance}</th>\n                    <th>{c.PreviousCondition}</th>\n                    <th>{c.CurrentCondition}</th>\n                    <th>{c.LastCraftAction} </th>\n                  </tr>\n                )}\n              </tbody>\n            </HTMLTable>\n          </Content>\n        </Container>\n      </PaddedCard>\n    );\n  }\n}\n","import * as React from 'react';\nimport { Colors } from '@blueprintjs/core';\n\nimport styled from 'styled-components';\n\nimport './App.css';\n\nimport Details from './Details';\nimport CraftList from './CraftList';\nimport CraftHistory from './CraftHistory';\n\nconst AppRoot = styled.div`\n  background-color: ${Colors.DARK_GRAY3};\n  height: 100vh;\n  overflow-y: auto;\n\n  &::-webkit-scrollbar {\n    width: 5px;\n  }\n\n  &::-webkit-scrollbar-track {\n    background: ${Colors.GRAY1};\n  }\n\n  &::-webkit-scrollbar-thumb {\n    background: ${Colors.DARK_GRAY5};\n  }\n`;\n\nexport default class App extends React.Component {\n  render() {\n    return (\n      <AppRoot className=\"bp3-dark\">\n        <Details />\n        <CraftList />\n        <CraftHistory />\n      </AppRoot>\n    );\n  }\n}\n","\nimport React, { Component } from 'react';\nimport { Colors, NonIdealState, Spinner } from '@blueprintjs/core';\n\nimport styled from 'styled-components';\n\nimport './App.css';\n\nconst AppRoot = styled.div`\n  background-color: ${Colors.DARK_GRAY3};\n  min-height: 100vh;\n  height: 100vh;\n  margin: auto;\n`;\n\ninterface LoadingAppProps {\n  error?: string;\n}\n\nexport default class LoadingApp extends Component<LoadingAppProps> {\n  render() {\n    if (this.props.error) {\n      return (\n        <AppRoot className=\"bp3-dark\">\n          <NonIdealState\n            icon=\"warning-sign\"\n            title={this.props.error}\n          />\n        </AppRoot>\n      )\n    }\n    return (\n      <AppRoot className=\"bp3-dark\">\n        <NonIdealState\n          icon={<Spinner intent=\"primary\" />}\n          title=\"Loading...\"\n        />\n      </AppRoot>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { inject, observer, Provider } from 'mobx-react';\n\nimport streamStore, { PluginParams, StreamStoreProps, streamStoreDefaultProps } from './store/stream';\n\nimport App from './components/App';\nimport LoadingApp from './components/LoadingApp';\n\ndeclare global {\n  interface Window {\n    waitForInit?: boolean;\n    initPlugin?: (params: PluginParams) => void;\n  }\n}\n\nconst getPluginParams = async (): Promise<PluginParams> => {\n  if (!window.waitForInit) {\n    return {\n      apiURL: 'http://localhost:8080/query',\n    };\n  } else {\n    return new Promise((resolve) => {\n      window.initPlugin = (params) => {\n        resolve(params);\n      };\n    });\n  }\n};\n\n@inject('streamStore')\n@observer\nclass Main extends Component<StreamStoreProps> {\n  static defaultProps = streamStoreDefaultProps;\n\n  componentDidMount() {\n    getPluginParams().then((params) => {\n      this.props.streamStore.initialize(params);\n    });\n  }\n\n  render() {\n    const { loading, error } = this.props.streamStore;\n\n    if (loading) return <LoadingApp error={error} />;\n    return (<App />);\n  }\n}\n\n\nconst MainWithState = () => (\n  <Provider {...{ streamStore }}>\n    <Main />\n  </Provider>\n);\n\nReactDOM.render(<MainWithState />, document.getElementById('root'));\n"],"sourceRoot":""}